'''
Task 5 (Part A) -- Random Forest Classifier using feature engineering
CS342 Assignment 2 Solutions
u1610375
'''
### RF Classifier ###
## Implementing a Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.calibration import CalibratedClassifierCV
from sklearn.multiclass import OneVsRestClassifier
import numpy as np
import pandas as pd
import gc

clf = RandomForestClassifier(
		n_estimators=10000, 
		criterion='gini',
                oob_score=True, 
                n_jobs=4, 
                random_state=42,
                verbose=1, 
                class_weight='balanced',
                max_features='sqrt', 
                max_depth=7)

# Uses a set of binary classifiers to conduct multiclass classification
clf = OneVsRestClassifier(clf)

# Makes sure the probabilities predicted by the classifier are in line with the
## distribution of the training set
calibrator = CalibratedClassifierCV(clf, cv=3)

## Read Features -- the csv files are generated by previous scripts ##
train_series = pd.read_csv('/modules/cs342/Assignment2/training_set.csv',header=0)
train_metadata  = pd.read_csv('/modules/cs342/Assignment2/training_set_metadata.csv',header=0)
simple_features = pd.read_csv('/modules/cs342/Assignment2/simple_features.csv', header=0)
final_fe = pd.read_csv('/modules/cs342/Assignment2/final_fe.csv', header=0)
features_simple_nn = pd.read_csv('/modules/cs342/Assignment2/agg_train.csv', header=0)

### MERGE features_simple_nn (simple functions of the time-series data taken from simple NN kernel)
## with final_fe - features produced as part of the feature engineering task
model_features = pd.merge(final_fe, features_simple_nn, on="object_id")


### Merge model_features with metadata ###

full_model_features = pd.merge(model_features, train_metadata, on="object_id")

### Extract the targets, delete them from full_model_features ###
del full_model_features['target']
Y_train = train_metadata['target']

### Normalize the features ###
def normalize(ts):
	return (ts-ts.mean()) / ts.std()

# Fill missing values for the distmod
full_model_features['distmod'] = full_model_features['distmod'].fillna(0.0)

full_model_features = normalize(full_model_features)	

full_model_features.to_csv('/modules/cs342/Assignment2/full_model_features.csv')

### FIT THE Calibrator of the Random Forest Model ###

calibrator.fit(full_model_features, Y_train)

### Predictions on the test set done on a Kaggle Kernel ###






